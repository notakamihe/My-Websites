{"version":3,"sources":["logo.svg","tweets/components.js","lookup/lookup.js","App.js","reportWebVitals.js","index.js"],"names":["ActionBtn","props","tweet","action","useState","likes","setLikes","didLike","setDidLike","className","actionDisplay","display","type","onClick","event","preventDefault","Tweet","id","content","TweetsList","newTweets","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","loadTweets","alert","map","item","index","TweetsComponent","textAreaRef","React","createRef","setNewTweets","onSubmit","newVal","current","value","tempNewTweets","unshift","ref","name","required","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.14f3badf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\nexport function ActionBtn (props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [didLike, setDidLike] = useState(tweet.didLike)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleClick = (event) => {\n        event.preventDefault()\n\n        if (action.type === 'like') {\n            if (didLike) {\n                setLikes(likes - 1)\n                setDidLike(false)\n            } else {\n                setLikes(likes + 1)\n                setDidLike(true)\n            } \n        }\n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n\nexport function Tweet (props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n\n    return <div className={className}>\n        <p>{tweet.id}  |  {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{type: 'like', display:'Likes'}} />\n            <ActionBtn tweet={tweet} action={{type: 'unlike', display:'Unlike'}} />\n            <ActionBtn tweet={tweet} action={{type: 'retweet', display:'Retweet'}} />\n        </div>\n    </div>\n}\n\nexport function TweetsList (props) {\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : []) \n    const [tweets, setTweets] = useState([])\n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n        \n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setTweetsInit(response)\n            } else {\n                alert('There was an error')\n            }\n        }\n\n        loadTweets(myCallback)\n    }, [tweetsInit])\n\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} className=' my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n}\n\nexport function TweetsComponent (props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12312\n        })\n\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} className='form-control' name='tweet' required={true}></textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet now</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets} />\n    </div>\n}","export function loadTweets (callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = 'json'\n\n    xhr.responseType = responseType\n    xhr.open(method, url)\n\n    xhr.onload = () => {\n        callback(xhr.response, xhr.status)\n    }\n\n    xhr.onerror = () => {\n        callback({'message': 'The request was an error'}, 400)\n    }\n\n    xhr.send()\n } ","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent, TweetsList} from './tweets'\n\n \n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n            <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\n\nif (appEl) {\n    ReactDOM.render(<App />, appEl)\n}\n\nconst tweetsEl = document.getElementById('tweetme')\n\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent />, tweetsEl)\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}